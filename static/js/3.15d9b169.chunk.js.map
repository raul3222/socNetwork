{"version":3,"sources":["components/Dialogs/Dialogs.module.css","components/Dialogs/DialogItem/DialogItem.jsx","components/Dialogs/Message/Message.jsx","components/Dialogs/MessageForm.jsx","components/Dialogs/Dialogs.jsx","components/Dialogs/DialogsContainer.jsx"],"names":["module","exports","DialogItem","props","path","id","className","s","dialog","active","to","activeClassName","activeLink","name","Message","message","maxLength50","maxLengthCreator","MessageReduxForm","reduxForm","form","onSubmit","handleSubmit","Field","component","Textarea","type","validate","required","Dialogs","dialogsElements","dialogs","map","messagesElements","messages","dialogsItems","data","sendMessage","compose","connect","state","dialogsPage","mesBll","isAuth","auth","dispatch","addMessageActionCreator","withAuthRedirectHoc"],"mappings":"2GACAA,EAAOC,QAAU,CAAC,QAAU,yBAAyB,aAAe,8BAA8B,WAAa,4BAA4B,SAAW,0BAA0B,OAAS,0B,kFCc1KC,EAXI,SAACC,GAChB,IAAIC,EAAI,mBAAeD,EAAME,IAC7B,OACI,qBAAKC,UAAS,UAAKC,IAAEC,OAAP,YAAiBD,IAAEE,QAAjC,SACI,cAAC,IAAD,CAASC,GAAIN,EAAMO,gBAAiBJ,IAAEK,WAAtC,SAAmDT,EAAMU,UCKtDC,EARC,SAACX,GACb,OACI,qBAAKG,UAAWC,IAAEQ,QAAlB,SAA4BZ,EAAMY,W,kCCFpCC,EAAcC,YAAiB,IAgBtBC,EAJWC,YAAU,CAChCC,KAAM,mBADgBD,EAXN,SAAChB,GACjB,OACI,8BACI,uBAAMkB,SAAUlB,EAAMmB,aAAtB,UACI,cAACC,EAAA,EAAD,CAAOC,UAAWC,IAAUZ,KAAK,UAAUa,KAAK,OAAOC,SAAU,CAACC,IAAUZ,KAC5E,0DCkBDa,EAvBC,SAAC1B,GAEjB,IAAI2B,EAAkB3B,EAAM4B,QAAQC,KAAI,SAAAxB,GAAM,OAAI,cAAC,EAAD,CAAYK,KAAML,EAAOK,KAAMR,GAAIG,EAAOH,QACxF4B,EAAmB9B,EAAM+B,SAASF,KAAI,SAAAjB,GAAO,OAAI,cAAC,EAAD,CAASA,QAASA,EAAQA,aAM3E,OACI,sBAAKT,UAAWC,IAAEwB,QAAlB,UACI,qBAAKzB,UAAWC,IAAE4B,aAAlB,SACIL,IAEJ,sBAAKxB,UAAWC,IAAE2B,SAAlB,UACKD,EACD,cAAC,EAAD,CAAkBZ,SAXf,SAACe,GACbjC,EAAMkC,YAAYD,EAAKrB,SACtBqB,EAAKrB,QAAQ,a,gCC4DNuB,sBACXC,aA3BkB,SAACC,GACnB,MAAO,CACHT,QAASS,EAAMC,YAAYV,QAC3BG,SAAUM,EAAMC,YAAYP,SAC5BQ,OAAQF,EAAMC,YAAYC,OAC1BC,OAAQH,EAAMI,KAAKD,WAIF,SAACE,GACtB,MAAO,CACHR,YAAa,SAACtB,GACV8B,EAASC,YAAwB/B,SAgBzCgC,IAFWT,CAGbT","file":"static/js/3.15d9b169.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__1I5Jr\",\"dialogsItems\":\"Dialogs_dialogsItems__vtoXn\",\"activeLink\":\"Dialogs_activeLink__3oizF\",\"messages\":\"Dialogs_messages__1zej6\",\"dialog\":\"Dialogs_dialog__2oqVM\"};","import React from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\nimport s from '../Dialogs.module.css';\r\n\r\nconst DialogItem = (props) => {\r\n    let path = `/dialogs/${props.id}`;\r\n    return (\r\n        <div className={`${s.dialog} ${s.active}`}>\r\n            <NavLink to={path} activeClassName={s.activeLink}>{props.name}</NavLink>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n\r\nexport default DialogItem;","import React from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\nimport s from '../Dialogs.module.css';\r\n\r\n\r\nconst Message = (props) =>{\r\n    return(\r\n        <div className={s.message}>{props.message}</div>\r\n    )\r\n}\r\n\r\n\r\n\r\nexport default Message;","import React from 'react';\r\nimport { Field, reduxForm } from 'redux-form';\r\nimport { maxLengthCreator, required } from '../../utils/validators/validator';\r\nimport { Textarea } from '../common/FormsControls/FormsControls';\r\n\r\nconst maxLength50 = maxLengthCreator(50); \r\nconst MessageForm = (props) =>{\r\n    return(\r\n        <div>\r\n            <form onSubmit={props.handleSubmit}>\r\n                <Field component={Textarea} name='message' type='text' validate={[required, maxLength50]}/> \r\n                <button>Send message</button>\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n\r\n const MessageReduxForm = reduxForm({\r\n    form: 'addMessagesForm',\r\n})(MessageForm);\r\n\r\nexport default MessageReduxForm;","import React from 'react';\r\nimport s from './Dialogs.module.css';\r\nimport DialogItem from './DialogItem/DialogItem';\r\nimport Message from './Message/Message';\r\nimport MessageReduxForm from './MessageForm';\r\n\r\nconst Dialogs = (props) =>{\r\n \r\nlet dialogsElements = props.dialogs.map(dialog => <DialogItem name={dialog.name} id={dialog.id} />);\r\nlet messagesElements = props.messages.map(message => <Message message={message.message} />);\r\n\r\n    const submit = (data) =>{\r\n       props.sendMessage(data.message);\r\n        data.message='';\r\n    }\r\n    return (\r\n        <div className={s.dialogs}>\r\n            <div className={s.dialogsItems}>\r\n               {dialogsElements}\r\n            </div>\r\n            <div className={s.messages}>\r\n                {messagesElements}\r\n                <MessageReduxForm onSubmit={submit}/>\r\n                \r\n            </div>\r\n            \r\n        </div>\r\n    )\r\n}\r\nexport default Dialogs;","import React from 'react';\r\nimport Dialogs from './Dialogs';\r\nimport {addMessageActionCreator, updateMessageActionCreator} from '../../redux/dialogsReducer';\r\nimport {connect} from 'react-redux';\r\nimport { withAuthRedirectHoc } from '../hoc/withRedirect';\r\nimport { compose } from 'redux';\r\n\r\n\r\n\r\n// const DialogsContainer = (props) =>{\r\n\r\n   \r\n\r\n//     return (\r\n//         <StoreContext.Consumer>\r\n//             {\r\n//                 (store) =>{\r\n//                     let state = store.getState();\r\n\r\n//                     //  let dialogsElements = state.dialogsPage.dialogs.map(dialog => <DialogItem name={dialog.name} id={dialog.id} />);\r\n//                     //  let messagesElements = state.dialogsPage.messages.map(message => <Message message={message.message} />);\r\n                      \r\n//                      //let newMessage = React.createRef();\r\n                      \r\n//                       let sendMessage = () =>{\r\n//                          store.dispatch(addMessageActionCreator());\r\n//                       }\r\n//                       let updateMessage = (text) =>{\r\n//                           store.dispatch(updateMessageActionCreator(text));\r\n//                       }\r\n//                return(\r\n\r\n               \r\n//        <Dialogs \r\n//        updateMessage={updateMessage} \r\n//        sendMessage={sendMessage} \r\n//        mesBll={state.dialogsPage.mesBll} \r\n//        //dialogsElements={dialogsElements}\r\n//        dialogsPage={state.dialogsPage}\r\n//        />\r\n//        )\r\n//     }\r\n//             }\r\n//        </StoreContext.Consumer>\r\n//     )\r\n// }\r\n\r\nlet mapStateToProps = (state) =>{\r\n    return {\r\n        dialogs: state.dialogsPage.dialogs,\r\n        messages: state.dialogsPage.messages,\r\n        mesBll: state.dialogsPage.mesBll,\r\n        isAuth: state.auth.isAuth\r\n    }\r\n}\r\n\r\nlet mapDispatchToProps = (dispatch) =>{\r\n    return {\r\n        sendMessage: (message) =>{\r\n            dispatch(addMessageActionCreator(message));\r\n        }\r\n        // updateMessage: (text) => {\r\n        //     dispatch(updateMessageActionCreator(text))\r\n        // }\r\n    }\r\n}\r\n\r\n\r\n\r\n// let authRedirect = withAuthRedirectHoc(Dialogs);\r\n\r\n// const DialogsContainer = connect(mapStateToProps, mapDispatchToProps)(authRedirect);\r\n\r\nexport default compose(\r\n    connect(mapStateToProps, mapDispatchToProps),\r\n    withAuthRedirectHoc\r\n)(Dialogs);\r\n\r\n// DialogsContainer;"],"sourceRoot":""}